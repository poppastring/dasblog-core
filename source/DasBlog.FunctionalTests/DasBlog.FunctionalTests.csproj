<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <IsPackable>false</IsPackable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.7.0" />
    <PackageReference Include="Newtonsoft.Json" Version="10.0.1" />
    <PackageReference Include="xunit" Version="2.3.1" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" />
    <DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" />
  </ItemGroup>
  <!--
      We do not follow the expected Selenium way of doing things.
      We do the following:
      1. WebDriver.dll and WebDriver.Support.dll assemblies from Selenium are
         referenced as dependencies (directly hard wired - not via nuget).
      2. FirefoxDriver.exe v0.21 (provided by Mozilla) and ChromeDriver.exe v2.40 (provided by google)
         exes are included as content and copied to the binary directory
      3. Add the nuget package for NewtonSoft.json v10.0.1.
      The constructors FirefoxDriver() and ChromeDriver() pick up (and invoke) the exes from
      the binary directory.

      What SHOULD happen is (based on, among others, https://www.automatetheplanet.com/webdriver-dotnetcore2/:
      All 4 drivers are referenced as nuget packages - done deal.  They drag in NewtonSoft.json
      presumably transitively

      This suggested nuget approach worked well under Rider and I assume VS.
      However, when running CLI dotnet build an 'error MSB4018: The "ResolveAssemblyReference" task failed unexpectedly.'
      killed the build.

      I don't know what Rider does to make it work.  However a major target for us is AppVeyor so a cli build is essential

      I scraped the exes and dlls by going the nuget route to start with and then 
      poking around the nuget packages and copying across the 4 binaries I found.

      At the time of writing AppVeyor is working for Firefox but failing with Chrome because
      the AppVeyor chrome browser is out of date.

      Note that if you re-adopt the nuget stategy then Selenium may have problems finding
      the drivers.  Selenium looks for the browser specific drivers (exes) in the "current directory".  However
      it uses the Selenium.WebDriver's assembly location as the "current directory".
      This will fail becuase the assembly's location is somewhere in the nuget packages hierarchy
      whereas the browser specific drivers are in our binary directory.  Selenium's fallbacks
      of looking on the path etc. may or may not work.  A workaround is to change
      the current directory to our binary directory DasBlog.FunctionalTests/..../netcoreapp2.1
      and WebDriver should find the browser specific drivers.
  -->
  <ItemGroup>
    <Reference Include="WebDriver, Version=3.13.1.0, Culture=neutral, PublicKeyToken=null">
      <HintPath>WebDriver.dll</HintPath>
    </Reference>
    <Reference Include="WebDriver.Support, Version=3.13.1.0, Culture=neutral, PublicKeyToken=null">
      <HintPath>WebDriver.Support.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <None Remove="chromedriver.exe" />
    <Content Include="chromedriver.exe">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <None Remove="geckodriver.exe" />
    <Content Include="geckodriver.exe">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
</Project>