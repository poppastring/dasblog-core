// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DasBlog.Web.Models.BlogViewModels.WebManifest;
//
//    var coordinate = Coordinate.FromJson(jsonString);

namespace DasBlog.Services.Site
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	
	public partial class WebManifest
	{
		/// <summary>
		/// The background_color member describes the expected background color of the web
		/// application.
		/// </summary>
		[JsonProperty("background_color", NullValueHandling = NullValueHandling.Ignore)]
		public string BackgroundColor { get; set; }

		/// <summary>
		/// The base direction of the manifest.
		/// </summary>
		[JsonProperty("dir", NullValueHandling = NullValueHandling.Ignore)]
		public string Dir { get; set; }

		/// <summary>
		/// The item represents the developer's preferred display mode for the web application.
		/// </summary>
		[JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
		public string Display { get; set; }

		/// <summary>
		/// The icons member is an array of icon objects that can serve as iconic representations of
		/// the web application in various contexts.
		/// </summary>
		[JsonProperty("icons", NullValueHandling = NullValueHandling.Ignore)]
		public ManifestImageResource[] Icons { get; set; }

		/// <summary>
		/// A string that represents the id of the web application.
		/// </summary>
		[JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
		public string Id { get; set; }

		/// <summary>
		/// The primary language for the values of the manifest.
		/// </summary>
		[JsonProperty("lang", NullValueHandling = NullValueHandling.Ignore)]
		public string Lang { get; set; }

		/// <summary>
		/// The name of the web application.
		/// </summary>
		[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		/// <summary>
		/// The orientation member is a string that serves as the default orientation for all
		/// top-level browsing contexts of the web application.
		/// </summary>
		[JsonProperty("orientation", NullValueHandling = NullValueHandling.Ignore)]
		public string Orientation { get; set; }

		/// <summary>
		/// Boolean value that is used as a hint for the user agent to say that related applications
		/// should be preferred over the web application.
		/// </summary>
		[JsonProperty("prefer_related_applications", NullValueHandling = NullValueHandling.Ignore)]
		public bool? PreferRelatedApplications { get; set; }

		/// <summary>
		/// Array of application accessible to the underlying application platform that has a
		/// relationship with the web application.
		/// </summary>
		[JsonProperty("related_applications", NullValueHandling = NullValueHandling.Ignore)]
		public ExternalApplicationResource[] RelatedApplications { get; set; }

		/// <summary>
		/// A string that represents the navigation scope of this web application's application
		/// context.
		/// </summary>
		[JsonProperty("scope", NullValueHandling = NullValueHandling.Ignore)]
		public string Scope { get; set; }

		/// <summary>
		/// A string that represents a short version of the name of the web application.
		/// </summary>
		[JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
		public string ShortName { get; set; }

		/// <summary>
		/// Array of shortcut items that provide access to key tasks within a web application.
		/// </summary>
		[JsonProperty("shortcuts", NullValueHandling = NullValueHandling.Ignore)]
		public ShortcutItem[] Shortcuts { get; set; }

		/// <summary>
		/// Represents the URL that the developer would prefer the user agent load when the user
		/// launches the web application.
		/// </summary>
		[JsonProperty("start_url", NullValueHandling = NullValueHandling.Ignore)]
		public string StartUrl { get; set; }

		/// <summary>
		/// The theme_color member serves as the default theme color for an application context.
		/// </summary>
		[JsonProperty("theme_color", NullValueHandling = NullValueHandling.Ignore)]
		public string ThemeColor { get; set; }
	}

	public partial class ManifestImageResource
	{
		[JsonProperty("purpose", NullValueHandling = NullValueHandling.Ignore)]
		public string Purpose { get; set; }

		/// <summary>
		/// The sizes member is a string consisting of an unordered set of unique space-separated
		/// tokens which are ASCII case-insensitive that represents the dimensions of an image for
		/// visual media.
		/// </summary>
		[JsonProperty("sizes", NullValueHandling = NullValueHandling.Ignore)]
		public string Sizes { get; set; }

		/// <summary>
		/// The src member of an image is a URL from which a user agent can fetch the icon's data.
		/// </summary>
		[JsonProperty("src")]
		public string Src { get; set; }

		/// <summary>
		/// The type member of an image is a hint as to the media type of the image.
		/// </summary>
		[JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
		public string Type { get; set; }
	}

	public partial class ExternalApplicationResource
	{
		/// <summary>
		/// An array of fingerprint objects used for verifying the application.
		/// </summary>
		[JsonProperty("fingerprints", NullValueHandling = NullValueHandling.Ignore)]
		public string[] Fingerprints { get; set; }

		/// <summary>
		/// Information additional to the URL or instead of the URL, depending on the platform.
		/// </summary>
		[JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
		public string Id { get; set; }

		/// <summary>
		/// Information about the minimum version of an application related to this web app.
		/// </summary>
		[JsonProperty("min_version", NullValueHandling = NullValueHandling.Ignore)]
		public string MinVersion { get; set; }

		/// <summary>
		/// The platform it is associated to.
		/// </summary>
		[JsonProperty("platform")]
		public string Platform { get; set; }

		/// <summary>
		/// The URL where the application can be found.
		/// </summary>
		[JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
		public Uri Url { get; set; }
	}

	public partial class Fingerprint
	{
		[JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
		public string Type { get; set; }

		[JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
		public string Value { get; set; }
	}

	/// <summary>
	/// A shortcut item represents a link to a key task or page within a web app. A user agent
	/// can use these values to assemble a context menu to be displayed by the operating system
	/// when a user engages with the web app's icon.
	/// </summary>
	public partial class ShortcutItem
	{
		/// <summary>
		/// The description member of a shortcut item is a string that allows the developer to
		/// describe the purpose of the shortcut.
		/// </summary>
		[JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }

		/// <summary>
		/// The icons member of a shortcut item serves as iconic representations of the shortcut in
		/// various contexts.
		/// </summary>
		[JsonProperty("icons", NullValueHandling = NullValueHandling.Ignore)]
		public ManifestImageResource[] Icons { get; set; }

		/// <summary>
		/// The name member of a shortcut item is a string that represents the name of the shortcut
		/// as it is usually displayed to the user in a context menu.
		/// </summary>
		[JsonProperty("name")]
		public string Name { get; set; }

		/// <summary>
		/// The short_name member of a shortcut item is a string that represents a short version of
		/// the name of the shortcut. It is intended to be used where there is insufficient space to
		/// display the full name of the shortcut.
		/// </summary>
		[JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
		public string ShortName { get; set; }

		/// <summary>
		/// The url member of a shortcut item is a URL within scope of a processed manifest that
		/// opens when the associated shortcut is activated.
		/// </summary>
		[JsonProperty("url")]
		public string Url { get; set; }
	}

	public partial class WebManifest
	{
		public static WebManifest FromJson(string json) => JsonConvert.DeserializeObject<WebManifest>(json);
	}

	public static class Serialize
	{
		public static string ToJson(this WebManifest self) => JsonConvert.SerializeObject(self);
	}

}
